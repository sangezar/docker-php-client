<?php

declare(strict_types=1);

namespace Sangezar\DockerClient\Exception;

/**
 * Exception thrown when an operation fails
 */
class OperationFailedException extends ApiException
{
    private string $operation;
    private ?string $resourceType;
    private ?string $resourceId;

    /**
     * @param string $operation Operation name
     * @param string|null $resourceType Resource type (container, image, etc.)
     * @param string|null $resourceId Resource identifier
     * @param string $message Error message (automatically generated by default)
     * @param int $code Error code
     * @param \Throwable|null $previous Previous exception
     * @param array<string, mixed>|null $responseData API response data
     * @param int|null $statusCode HTTP status code of the response
     */
    public function __construct(
        string $operation,
        ?string $resourceType = null,
        ?string $resourceId = null,
        string $message = '',
        int $code = 0,
        ?\Throwable $previous = null,
        ?array $responseData = null,
        ?int $statusCode = null
    ) {
        $this->operation = $operation;
        $this->resourceType = $resourceType;
        $this->resourceId = $resourceId;

        if (empty($message)) {
            $message = sprintf('Operation "%s" failed', $operation);

            if ($resourceType !== null && $resourceId !== null) {
                $message .= sprintf(' for %s "%s"', $resourceType, $resourceId);
            } elseif ($resourceType !== null) {
                $message .= sprintf(' for %s', $resourceType);
            }

            if ($responseData !== null && isset($responseData['message'])) {
                $responseMessage = $responseData['message'];
                if (is_string($responseMessage)) {
                    $message .= sprintf(': %s', $responseMessage);
                } elseif (is_scalar($responseMessage)) {
                    $message .= sprintf(': %s', (string)$responseMessage);
                } else {
                    $message .= ': Unknown error';
                }
            }
        }

        parent::__construct($message, $code, $previous, $responseData, $statusCode);
    }

    /**
     * Get the operation name
     *
     * @return string
     */
    public function getOperation(): string
    {
        return $this->operation;
    }

    /**
     * Get the resource type
     *
     * @return string|null
     */
    public function getResourceType(): ?string
    {
        return $this->resourceType;
    }

    /**
     * Get the resource identifier
     *
     * @return string|null
     */
    public function getResourceId(): ?string
    {
        return $this->resourceId;
    }
}
